{"noir_version":"1.0.0-beta.7+24c053fba747770cf8d3f813d22cfa003714dfb6","hash":"13953347173116847718","abi":{"parameters":[{"name":"amounts","type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"private"},{"name":"min_total_salary","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{"3996144819682025981":{"error_kind":"string","string":"Amount must not be zero"}}},"bytecode":"H4sIAAAAAAAA/+Va247aMBA9EO6XwgJZli1S2beqUqU4gSW89VeKGv6g733uR/ZPKrUudus6CVLDmWhRR1pNNrYmZ2aO7ROggbOtf/69N9ct4xvIm733wfjoOlPEWJGLty0JuO08yMZNouftNtvHmUrUxyg+HNNdtN0dn1OVql26+xSnSZKl23R/OB720UFtk0yddofkZALXWfQGZIrekQTcufGiNyFT9K4k4O6NFz2ATNF7koB7QkXXWJvIW4ucAzMWcatirkAqsQpacm1sZS/cfveNH8CQITBeD3zz7ulJGw9UhwPuN8j/jSgVF3FsFrHqg7chDCBD4KbHkWtxMnMeFuRcNaa7VoZm/fzLycasCyMXayNJwKMCglwLfgTeYh0T85Wq4RjlqqNq/DG4m0FZjyuaGpi8mX0eM3GeflnG5M8rYk/czUrH3eC8WZUpQraqbUHmsAEHZ6Famhg/tQWxBdQDvlqaIq+WAsEiXqskJuARdYrbUBLMnO8goyTuUL+SmEBGScwkAc/AVxIz8BbrHC9bSegazsFXEnO8bCUxNXkz+zwHX0kw+bOAjJLQcTeoV0lIvbaChDM13q1FaPy9LYgtYGi8e09PeuOBYisJt4hVybU3sULwiHrPyzGqk5RSCggknEWkXBr/AI+AS+RJqSdJk3IKHimX4JHyAfWQUuKdmVUDAsFje1GQOi22W9eV8Y/A32ReIU9wPenJA8X+WkSqIRVjKfsuuCLiehQiCvtdkJnzayJHLFcZuWZnKXnSJ/QS/A07JMZibthrcE9jdj80X9bgb/hMHjJrqOtn91L3lzP2IAyccdda3lxt35/effn69vPenRdcGGtfGOuWjNm+9D0fOliIX/8qG38hEz9yf8MBLxf3uX0vf4C7joA/vWojb01vzM7tefgafHzKxxIUPMva3PiFcy8swTpw4hB7Gtv4Q5n4hZwZONdDb8z2rmgdN0r+b3r+0txLn4OOC8ZsTNsrF6/N4wch95xg+ygAAA==","debug_symbols":"nZNLboQwEETv4jUL/MPDXCWKkAEzsmQZ5IFIEeLuaVyQzCyyYVMPu6nyT72y3rXLo/FxGJ/s/rGyNvkQ/KMJY2dnP0aaXbeCncNmTs7RFHupk2uyycWZ3eMSQsG+bFjyT8/JxszZJqqWBXOxJ1Lg4IPbv7biz13+b+VCHGYuxa9dX/KbK36jD78o+QW/UOf6orrkr+vDL8WV80t57l8a/eb/pJHtfHp7cVbSkgXjWUVWmVVl1VmrrCbrjd1VweqsvAQ4IAAJKEADFWAAhHBKoc2KEuCAACSgAA1UgAFuAFIkpVQEDghAAgrQQAUY4AbUGQopCikKKQopak/Z9ptP3rbBHQ0zLLF76Z/5ezorZ4dNaexcvyS333yu0Vv8AA==","file_map":{"50":{"source":"fn main(amounts: [Field; 4], min_total_salary: Field) {\n    let mut total_salary = 0;\n\n    for i in 0..4 {\n        assert(amounts[i] != 0, \"Amount must not be zero\");\n        total_salary += amounts[i];\n    }\n\n    let total_salary_int: i32 = total_salary as i32;\n    let min_total_salary_int: i32 = min_total_salary as i32;\n    assert(total_salary_int >= min_total_salary_int);\n}","path":"/Users/levan/Documents/projects/hackathons/w3pn-berlin/hackathon-2025-berlin-submissions/projects/shadowpay/payroll/src/main.nr"}},"names":["main"],"brillig_names":["directive_invert","directive_integer_quotient"]}